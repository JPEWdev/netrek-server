RSS feed from Netrek Server.

Installation:

1.  install Netrek server as usual, (this will create var/blog and
var/www directories),

2.  install blosxom, and if it is not in the usual location edit
tools/blog and tools/blog-refresh to point to it, see variable
BLOSXOM,

TODO: detect blosxom using configure, --with-blosxom=/path/to/program

3.  test by using the tools/blog script to add a daemon class comment,
like this:

	blog daemon "Installed blog feature."

4.  verify that files have been placed in var/www,

5.  verify that normal Netrek game activity updates the files in
var/blog and thus in var/www,


Configuration:

etc/blosxom.conf contains configuration settings for blosxom,
initially placed by "make install", the directories are set up for the
default /usr/local/games/netrek-vanilla-server/ path.

TODO: have blosxom.conf generated by autoconf/configure.

The directories can be changed if the web server directory is some
other place than the Netrek server path.


Components:

tools/blog is a script which takes the files from var/blog and writes
web content in var/www, and it silently does nothing if blosxom is not
installed.  The script is started by the daemon when a bloggable event
occurs.  Blosxom is run in incremental change mode, so that each new
change causes minimal change to the web content.

tools/blog-refresh is a script that runs blosxom in "update all files"
mode.

ntserv/blog.c handles all blog events for the daemon and ntserv,
forking an instance of tools/blog.


Directories:

var/blog is created by "make install", and contains a text file for
each blog event.  It has a subdirectory for each class of event.
Removing the subdirectory blocks the events.  The script
tools/blog-purge-old maintains this subdirectory by removing old
events.

var/www is created by "make install", and contains static web content,
generated by blosxom under control of tools/blog and
tools/blog-refresh.  This directory should be made available to a web
server.  Blosxom knows about the directory via the etc/blosxom.conf
file.


Events logged by a class type, such as:

- daemon, starts and stops of the universe simulator,
	ok
- queue, game full event, queue full event,
	ok
- logins, new character, old character, logout with planet taken count,
    int  p_avrt;               /* average round trip time */
    int  p_stdv;               /* standard deviation in round trip time */
    int  p_pkls_c_s;           /* packet loss (client to server) */
    int  p_pkls_s_c;           /* packet loss (server to client) */
	not yet done
- racial, wins and losses by race, (coqn, geno, surr, base),
	ok
- t-mode, session begin, session end with struct status values,
	gantt chart showing players who were there, icons per pick/take/death
	not yet done
- planets, loss,
	not yet done
- bans, temporary add, temporary expire, 
	ok
- scriptable, "blog class 'message'"
	ok
- metaserver blog, of major activity by other servers,
	not yet done
- inl, game completion, stats, recordings.
	not yet done

TODO: not all .txt files in tree processed, why?  rerun blosxom?
TODO: avoid running blosxom too frequently

TODO: <zu22> Would be nice to see the current planet count, time
remaining if geno situation, players logged in, maybe rank players
list by DI, or highest session stats, Maybe this could be used as a
tool to attract players. Advertize on the MOTD how to subscribe to the
feed and subscribes could get email updates if there is >> X players
logged in.


Internal Design:

- daemon calls blog_* from blog.c,
- blog_* forks and execs tools/blog,
- tools/blog updates filesystem and static content,
- web browser accesses static content.


Software dependencies:

- blosxom, a perl script to generate static HTML from text files

Notes from PROJECTS yet to be implemented

	- RSS feed for genos, so that people can subscribe and be told
	  when the galactic is recently reset.  Jerub expressed an
	  interest in doing it.

	  Content area on netrek.org showing recent contested genos,
	  length of game leading up to it, number of players seen,
	  players per hour, keep latest ten, feed from multiple
	  servers. [planet .netrek .org?]

	  Server generated screen shot of final frame.

	  Separate feed for adminstrivia, with server CLI script for
	  adding to the feed.

	  INL server specific feed, containing game results, summary,
	  ltd stats by player.

	  Metaserver specific feed ... new servers listed, delistings,
	  weekly summary of query counts with history.

	  netrekd forked HTTP responder, or scripts to send stuff to a
	  web server?

Technical Details

	lib/conquer -> blosxom data -> blosxom rerun -> static content
perl /usr/lib/cgi-bin/blosxom -f='blosxom.conf' -password='netrek'
# use -all=1 for refresh

	micro-inetd -> micro-httpd -> static content
micro_inetd 8090 /usr/sbin/micro_httpd /tmp/blosxom/static/

	# package tcputils and micro-httpd
	  mini-inetd -> micro-httpd -> static content

mini-inetd 80 /usr/sbin/micro_httpd httpd /usr/local/games/netrek-server-vanilla/var/www/
mini-inetd 80 /usr/sbin/micro_httpd httpd /usr/games/continuum/var/www/
